/*
 * This source file was generated by the Gradle 'init' task
 */
package project2;

import java.util.HashSet;
import java.util.Random;

public class App {

    public static void main(String[] args) {
        System.out.println("Starting");
        Admin eCom = new Admin(100, 100, 300, 300);
        String[] adjectives = {"big", "smart", "small", "proud", "shy", "lucky", "adventurous", "pretty", "bombastic", "sweet", "foolish", "happy", "surprised", "normal", "moody"};
        String[] nouns = {"brain", "rabbit", "fox", "bomb", "locker", "hobo", "bat", "book", "closet", "computer", "gate", "rock", "seagull", "UM", "person", "robot"};
        int counter = 0;
        HashSet<String> namer = new HashSet<>();
        Random randomizer = new Random();

        while (namer.size() < 200) { 
            counter++;
            String candidateAdj = adjectives[randomizer.nextInt(adjectives.length)];
            String candidateNou = nouns[randomizer.nextInt(nouns.length)];
            if (namer.add(candidateAdj + "-" + candidateNou)) {
                eCom.addClient(counter, (candidateAdj+ "-" + candidateNou), candidateAdj+candidateNou+"@gmail.com", randomizer.nextFloat(200000f, 100000000f),
                randomizer.nextInt(4)+ 1);
            }
            
        }
        counter = 0;
        namer.clear();

        while (namer.size() < 100) {
            counter++;
            String candidateAdj = adjectives[randomizer.nextInt(adjectives.length)];
            String candidateNou = nouns[randomizer.nextInt(nouns.length)];
            if (namer.add(candidateNou + " of the " + candidateAdj)) {
                eCom.addVendor(counter, candidateNou + " of the " + candidateAdj, candidateNou + "@" + candidateAdj + ".com");
            }

            
        }
        counter = 0;
        namer.clear();

        while (namer.size() < 100) {
            counter++;
            String candidateAdj1 = adjectives[randomizer.nextInt(adjectives.length)];
            String candidateAdj2 = adjectives[randomizer.nextInt(adjectives.length)];
            if (namer.add(candidateAdj1 + " and " + candidateAdj2)) {
                eCom.addCourier(counter, candidateAdj1 + " and " + candidateAdj2, candidateAdj1 + "N" + candidateAdj2+ "@gmail.com");
            }

            
        }

        counter = 0;
        namer.clear();
        
        while (namer.size() < 500) { 
            counter++;
            String firstAd = adjectives[randomizer.nextInt(adjectives.length)];
            String secAd = adjectives[randomizer.nextInt(adjectives.length)];
            String candidateNou = nouns[randomizer.nextInt(nouns.length)];
            String candidate = firstAd + ": " + secAd + ", " + candidateNou;
            if (namer.add(candidate)) {
                eCom.addProduct(counter, candidate, 
                randomizer.nextFloat()*(float)(randomizer.nextInt(100)+1), 
                randomizer.nextInt(2000, 5000), eCom.getVendorKeys()
                .get(randomizer.nextInt(eCom.getVendorKeys().size())));
            }
            
        }


        Thread buyingSimulator = new Thread(() -> {
            try {
                while (!eCom.getCartActivities().isShutdown()) { 
                    Thread.sleep(5l);
                    eCom.buy(eCom.getUsers().get(eCom.getUserKeys().get(randomizer.nextInt(eCom.getUserKeys().size()))), eCom.getCatalogue().get(eCom.getProductKeys().get(randomizer.nextInt(eCom.getProductKeys().size()))), randomizer.nextInt(1, 6));
                }
            } catch (Exception e) {
            }
        });

        Thread checkoutSimulator = new Thread(() -> {
            try {
                while (!eCom.getCheckoutActivities().isShutdown()) {
                    Thread.sleep(1000l); 
                    for (int userId : eCom.getUserKeys()) {
                        eCom.confrimSale(eCom.getUsers().get(userId));
                    }
                }
            } catch (Exception e) {
            }
        });

        Thread emergencySimulator = new Thread(() ->{
            try {
                while (!eCom.getCheckoutActivities().isShutdown()) {
                    Thread.sleep(2000l);
                    Client emergencyClient = eCom.getUsers().get(eCom.getUserKeys().get(randomizer.nextInt(eCom.getUserKeys().size())));
                    Product emergencyProduct = eCom.getCatalogue().get(eCom.getProductKeys().get(randomizer.nextInt(eCom.getProductKeys().size())));
                    eCom.buy(emergencyClient, emergencyProduct);
                    eCom.confrimEmergencySale(emergencyClient);
                }
            } catch (Exception e) {
            }

        });

        Thread checkoutMonitor = new Thread(() -> {
            while (!eCom.getPackagingActivities().isShutdown()) { 
                if (!eCom.getPackingQueue().isEmpty()) {
                    eCom.packageNextSale();
                }
            }
        });

        Thread packMonitor = new Thread(() ->{
            while (!eCom.getDistributionActivities().isShutdown()) { 
                if (!eCom.getDeliveryQueue().isEmpty()) {
                    eCom.deliverNextPack();
                }
            }
        });


        for (int i = 0; i < 1000; i++) {
            eCom.buy(eCom.getUsers().get(eCom.getUserKeys().get(randomizer.nextInt(eCom.getUserKeys().size()))), eCom.getCatalogue().get(eCom.getProductKeys().get(randomizer.nextInt(eCom.getProductKeys().size()))));
        }

        buyingSimulator.start();
        checkoutSimulator.start();
        emergencySimulator.start();
        checkoutMonitor.start();
        packMonitor.start();

        try {
            Thread.sleep(12000);
        } catch (InterruptedException e) {
        }
        eCom.ceaseOperations();
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
        }
        /*System.out.println(String.format("Execution finalized. %n Total Checkouts: %d %n Total Packaging Orders: %d %n Total Deliveries %d",
         eCom.getFilledCheckouts().size(), eCom.getFilledPacks().size(), eCom.getFilledDeliveries())); */

        System.out.println("Execution Finalized.");
        System.out.println(eCom.getCartActivities());
        System.out.println(eCom.getCheckoutActivities());
        System.out.println(eCom.getPackagingActivities());
        System.out.println(eCom.getDistributionActivities());

        


    }
}
